### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String
  user: User
}

type Category {
  id: String!
  name: String!
  podcasts(cursor: PodcastWhereUniqueInput, skip: Int, take: Int): [Podcast!]!
}

input CategoryWhereUniqueInput {
  id: String
  name: String
}

input createPodcastInput {
  categories: [String]
  imageUrl: String
  info: String
  name: String!
  podcastLink: String!
}

input createProfileInput {
  bio: String
  profilePic: String
}

input createUserInput {
  email: String!
  name: String!
  password: String!
  password2: String!
}

input loginInput {
  email: String!
  password: String!
}

type Mutation {
  createPodcast(input: createPodcastInput): Podcast
  createUser(input: createUserInput): User
  login(input: loginInput): AuthPayload
  upsertProfile(input: createProfileInput): Profile
}

type Podcast {
  categories(cursor: CategoryWhereUniqueInput, skip: Int, take: Int): [Category!]!
  id: String!
  imageUrl: String
  info: String
  name: String!
  owner: User!
  podcastLink: String!
}

input PodcastWhereUniqueInput {
  id: String
  name: String
}

type Profile {
  bio: String
  id: String!
  profilePic: String!
  user: User!
}

type Query {
  getAllPodcasts: [Podcast]
  me: User
  searchPodcasts(input: searchInput): [Podcast]
}

input searchInput {
  searchQuery: String!
}

type User {
  email: String!
  id: String!
  name: String!
  profile: Profile
}
